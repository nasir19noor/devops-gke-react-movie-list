name: Deploy to GKE

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker Image Tag (e.g., latest, or a specific version)'
        required: false
        default: 'latest' 

permissions:
  contents: read
  id-token: write           

env:
  PROJECT_ID: nasir-456515 
  AR_REPO: nasir           
  AR_LOCATION: asia-southeast1 
  IMAGE_NAME: react-movie    
  GKE_CLUSTER: nasir-cluster
  GKE_ZONE: asia-southeast1-c 
  GKE_NAMESPACE: nasir  
  GCLOUD_CLI: /home/nasir/google-cloud-sdk/bin/gcloud   

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - id: auth
      uses: google-github-actions/auth@v2.0.0
      with:
        workload_identity_provider: 'projects/765255964105/locations/global/workloadIdentityPools/github-actions/providers/github'
        service_account: 'github-actions@nasir-456515.iam.gserviceaccount.com'

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2        

    - name: Check and Create Kubernetes Namespace
      run: |
        kubectl get nodes
        kubectl get namespace ${{ env.GKE_NAMESPACE }} || kubectl create namespace ${{ env.GKE_NAMESPACE }}

    - name: Deploy to GKE
      run: |
        IMAGE_FULL_PATH="${{ env.AR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AR_REPO }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"
        
        echo "Deploying image: $IMAGE_FULL_PATH"
        
        sed -i "s|asia-southeast1-docker.pkg.dev/nasir-456515/nasir/gke-app:latest|$IMAGE_FULL_PATH|" gcp/k8s/deployment.yaml
        
        kubectl apply -f gcp/k8s/namespace.yaml # Apply namespace just in case
        kubectl apply -f gcp/k8s/deployment.yaml
        kubectl apply -f gcp/k8s/service.yaml

    - name: Verify Deployment (Optional)
      run: |
        echo "Deployment to GKE submitted. Waiting for rollout..."
        kubectl rollout status deployment/gke-app-deployment -n ${{ env.GKE_NAMESPACE }}
        echo "Verifying service external IP..."
        kubectl get service gke-app-service -n ${{ env.GKE_NAMESPACE }}
        sleep 60
        echo "Attempting to retrieve external IP address..."
        EXTERNAL_IP=$(kubectl get service gke-app-service -n ${{ env.GKE_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -z "$EXTERNAL_IP" ]; then
          echo "External IP not yet assigned or failed to retrieve. Please check the service status manually."
        else
          echo "Application should be accessible at: http://$EXTERNAL_IP"
        fi
